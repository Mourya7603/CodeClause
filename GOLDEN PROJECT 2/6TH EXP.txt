 Button btn;
    ListView lst;
    BluetoothAdapter bT;
    BluetoothDevice[] btArray;
    public static final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
    static final int STATE_CONNECTED=1;
    static final int STATE_CONNECTION_FAILED=2;

    @SuppressLint("MissingPermission")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        btn = findViewById(R.id.btn);
        lst = findViewById(R.id.lst);
        bT = BluetoothAdapter.getDefaultAdapter();

        btn.setOnClickListener(v -> {
            @SuppressLint("MissingPermission")
            Set<BluetoothDevice> devices = bT.getBondedDevices();
            String[] pairlst = new String[devices.size()];
            btArray=new BluetoothDevice[devices.size()];
            int i=0;

            if(devices.size()>0)
            {
                for (BluetoothDevice device:devices)
                {
                    btArray[i] = device;
                    pairlst[i] = device.getName();
                    i++;
                }
                ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1,pairlst);
                lst.setAdapter(adapter);

            }
            });

        lst.setOnItemClickListener((parent, view, position, id) -> {
            ConnectThread connect = new ConnectThread(btArray[position]);
            connect.start();
            Toast.makeText(this,"Connecting....", Toast.LENGTH_SHORT).show();
        });

    }

    Handler handler=new Handler(msg -> {

        switch (msg.what)
        {
            case STATE_CONNECTED:
                Toast.makeText(getApplicationContext(),"Connected", Toast.LENGTH_SHORT).show();
                break;
            case STATE_CONNECTION_FAILED:
                Toast.makeText(getApplicationContext(),"Connection Failed", Toast.LENGTH_SHORT).show();
                break;
        }
        return true;
    });

    private class ConnectThread extends Thread
    {
        private BluetoothSocket socket;

        @SuppressLint("MissingPermission")
        public ConnectThread (BluetoothDevice btDevice)
        {
            try {
                socket = btDevice.createRfcommSocketToServiceRecord(MY_UUID);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        @SuppressLint("MissingPermission")
        public void run()
        {
            try {
                socket.connect();
                Message message= Message.obtain();
                message.what=STATE_CONNECTED;
                handler.sendMessage(message);

            } catch (IOException e) {
                try {
                    socket.close();
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
                Message message=Message.obtain();
                message.what=STATE_CONNECTION_FAILED;
                handler.sendMessage(message);
            }
        }
    }
}